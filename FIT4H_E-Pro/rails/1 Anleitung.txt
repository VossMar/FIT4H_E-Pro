Erstellung eines Gästebuch-Blogs


Ruby on Rails ist ein Entwicklungs-Rahmen für Webanwendungen basierend auf Ruby.
Es soll die Programmierung vereinfachen, indem es die Standartbedingungen einbindet.
Für eine Funktion wird weniger geschriebener Code gebraucht, also in anderen Sprachen.
Rails hat 2 Grundlegende Vorsätze:
	DRY (Dont Repeat Yourself)
		Keine Codewiderholungen, sollten mit Verweisen realisiert werden
	CoC (Convention over Configuration)
		Vereinbarungen gelten vor Hardwarekonfigurationen.

Erstellung eines Rails Projektes

rails new Kiki
	Erstellt eine Railsanwendung mit dem Namen "Kiki" im aktuellen Ordner
cd Kiki
	wechseln in den Ordner der Anwendung

	Im Projektordner sind mehrere Unterordner und Datein:
		app/			beinhaltet controller, models, views, helpers, mailers, inhalt der Anwendung
		bin/			beinhaltet Scripts die die Anwenung starten, oder um diese aufzusetzten
		config/			stellt Anwendungsverweise, Datenbanken und mehr ein
		conig.ru 		Gestell Konfiguration für Datenbanken die zum Anwendungsstart benutzt werden
		db/				beinhaltet den Datenbankaufbau und Datenbankintegation
		Gemfile			Datein mit denen die gem-Abhängigkeiten 
		Gemfile.lock	bestimmt werden, welche für die Anwendung benötigt werden
		lib/			erweiterbare Module für die Awendung
		log/			log Dateil der Anwendung
		public/			Ordner, der im Web gesehen wird. Beinhaltet bestimmte Datein und zusammengestellte Anlagen
		Rakefile		verweist auf Anwendung und läd diese, welche in der Kommanduzeile gestartet werden. Anstatt die Datei zu ändern, sollten eigene Anwendungen im Ordner lib/tasks hinzugefügt werden
		README.rdoc		Datei zur Einweisung in die Funktionallität der Anwendung
		test/			beinhaltet Testeinheiten, Zubehör und andere Testanwendungen.
		tmp/			kurzzeitige Datein (Cache, Prozesserkennung, Session-Datein)
		vendor/			Ordner für Drittanbietercode.

	bin/rails server  oder    rails server
		wird im Ordner der Anwendung ausgeführt und startet den Webserver

		Anwendung nun zu erreichen im Browser unter https://localhost:3000

		Strg+C zum beenden

bin/rails generate controller welcome index
	erstellt einen neuen Controller mit dem Namen "welcome" mit einer Aktion namens "index"
		Controller:	Ist dazu da, um Anfragen an die Anwendung zu empfangen. Das Routing entscheidet welcher controller welche Anfragen erhält. Controller werden mit mehreren Routen verknüpft, welche mit mehreren Aktionen verbunden sein könenn. Jede Aktion sammelt Informationen um diese zur Ansicht (view) zu stellen. Zweck dieser Ansicht ist, die Informationen für Menschen lesbar darzustellen. Wichtig hierbei ist, dass der Controller die Informationen beinhaltet, nicht die Ansicht (view), welche diese nur darstellt. 

Um ein "Hello, Rails!" später im Browser angezeigt zu bekommen, muss man die Datei zur Ansicht ändern: app/views/welcome/index.html.erb
Der vorhandene Code durch ein "<h1>Hello, Rails!</h1>" ersetzen.

Zum Anzeigen der Index-Seite im Browser, muss in config/routes.rb eine neue Route hinzugefügt werden. "root 'welcome#index'"  sollte schon auskommentiert vorhanden sein.
	Die Route "root 'welcome#index'" vermittelt Rails, dass Anfragen an das Rootverzeichnis (localhost:3000), zum index des welcome controller's weitergeleitet werden. "get 'welcome/index" verweist auf den Pfad der anzuzeigenden Datei. 

recource
	Ist ein Begriff, der für die Sammlung einzelner Objekte/Items dient. Man kann diese erstellen, lesen, updaten und löschen (CRAD create, read, update,destroy).
	Man muss ḿit der recources-Methode articles in der config/routes.rb hinzufügen
	"resources :articles"

Routes anzeigen lassen
	bin/rake routes


			(->Routing Error)

bin/rails generate controller articles
	um keinen Fehler wegen einer ungültigen Route zu erhalten, muss der befehl ausgeführt werden. Routen zeigen auf Controller
	Der Articlescontroller ist einfach gesagt eine Klasse, die vom Applicationcontroller erbt. In dieser Klasse werden Methoden definiert welche die aktionen für den Controller darstellen.


			(->Unknown Action)

Methode(Action) erstellen
	Um auf https://localhost:3000/articles/new zugreifen zu können muss diese Methode "new" erst angelegt werden.
	dazu fügt man vorerst 	def new
							end 		in die class ArticlesControllers ein

 	

			(->Template Error)

 	=>Fehlermeldung im Browser, da Vorlagen fehlen:
 	Erstellungsprogramme für Vorlagen (Templates):
 		erb 		meist für HTML templates
 		builder		für XML-templates
 		coffee 		für JavaScript-templates

Erstellen eines Templates
	app/views/articles/new.html.erb 	(1.Erweiterung->Format 2.Erweiterung->Handler(Erstellungsprogramm)
	Inhalt der Datei
		<h1>New Article</h1>

Füllen der Template
	<%= form_for :article do |f| %>	
		<p>
			<%= f.label :title %><br>				Überschrift für Form title
			<%= f.text_field :title %>				Textfeld für Form title
		</p>

		<p>
			<%= f.label :text %><br>				Überschrift für Form text
			<%= f.text_area :text %>				Textfeld für Form text
		</p>

		<p>
			<%= f.submit %>							Submit button für Form (f)
		</p>
	<% end %>


			(->Routin Error)

Das Absenden soll nicht auf die selbe Seite routen-> die erste zeile updaten:
	<%= form_for :article, url: articles_path do |f| %>

			(->Unknown Action)

Methode erstellen
	Mit dem Verweis auf articles, wird ein create aufgrund der Routen mitgesendet. Diese Methode zur speicherung der Daten muss aber erst definiert werden. In der Class ArticlesController:
		def new
			render plain: params[:article].inspect			
		end 
						->render: erstellt ein sehr simples Hash mit den gesendeten Daten welches diese nur ausgibt

Models
	Models verwenden einen einzigartigen Namen und deren entsprechenden Datenbanktabellen eine vielzahl. Rails beinhaltet einen Generator zum erstellen von Models.
		$ bin/rails generate model Article title:string text:text
	Dies erzeugt ein "Article" Model mit den Eigenschaften tilte vom Typ string und text vom Typ text.  Die Eigenschaften werden automatisch in die "articles" Tabelle der DB geschrieben.

bin/rake db:migrate
	Das Erstellen der Tabelle articles mit den Spalten title, text und 2x datestamp.

Speichern der Daten
	Zum speichern der Daten muss im ArticlesController im dem Article Model angepasst werden

		def create
			@article = Article.new(article_params)

			@article.save
			redirect_to @article
		end

		private
			def article_params
				params.require(:article).permit(:title, :text)
			end

	
				(Jedes Model kann mit seinen verknüpften Eigenschaften aufgerufen werden, welche mit den jeweiligen Datenbank verbunden sind. Die Methode article_params beinhaltet die zu sichernden Daten. Diese werden mit dem Article.new angelegt und in der Inzanzvariable @article gespeichert. @article.save sorgt dafür, dass das Model in der Datenbank abgelegt wird. Danach wird man mit redicted_to weitergelteitet, was gleich noch erstellt wird.
				Die Methode für die params.require.permit ist deshalb private, damit sie nur in dem Zusammenhang aufgerufen werden kann. Außerdem ist sie überhaupt da, damit Rails die Eigenschaften title und text überhaupt zulässt. Diese würden sonst, wen sie ohne requireund permit in der Article new Methode stehen würden geblockt werden und man bekäme ein "Attribute forbidden" zu sehen.)

Anzeigen der Daten(für spätere verlinkung)
	Damit das "redicted_to @article" nun greifen kann, müssen wir die Show action hinzufügen.
	In den Routen kann man sehen, dass die show Action Parameter benötigt. Dafür nehmen wir die ID, die mti GET, wie es die Route auch fordert mitschicken.

	Im Articles Controller ist nun folgendes einzutragen:
	def show
		@article = Article.find(params[:id])
	end

	Um etwas angezeigt zu bekommen, muss vorher in den views eine show.html.erb Seite mit folgendem Inhalt angelegt werden:
	<p>
		strong>Title:</strong>
		<%=@article.title %>
	</p>
	<p>
		<strong>Text:</strong>
		<%=@article.text %>
	</p>

Alle Datensätze auflisten
	Da sich diese auf den index bezieht, muss dafür im ArticlesController eine index Methode und in den views einee index.html.erb angelegt werden.

	def index
		@articles = Article.all
	end
	(Die Index Metode wird standartmäßig an erster stelle im Controller eingetragen)

	<h1>Listing Articles</h1>

	<table>
		<tr>
			<th>Title</th>
			<th>Text</th>
		</tr>
		
		<% @articles.each do |article| %>
			<tr>
				<td><%= article.title %></td>
				<td><%= article.text %></td>
			</tr>
		<%end%>
	</table>


Navigation
	Zum erstellen von verlinkungen ist folgendes in der index Datei der Welcome seite hinuzufügen:
	<h1>Hello Rails!</h1>
	<%= link_to 'My Blog', controller: 'articles' %>
	(Die link_to methode ist eine vorkonfigurierteMethode von rails)

	In der Index Datei der articles:
	<%= link_to 'New Article', new_article_path %>

	In der New Datei:
	(<%= form_for :article, url: articles_path do |f| %>
			...
	<% end %>)
	<%= link_to 'Back', articles_path %>

	In der show Datei:
	<%= link_to 'Back', articles_path %>

Erweiterungen
	Einfügen einer minimum Zeichenanzahl für das Title-Feld:
	validates :title, presence: true, lenght: { minimum: 5}
	in die Klasse Articles in articles.rb eintragen.
	Wenn dieses nicht zutrifft, wird ein false mitgesendet, welche noch abgefragt werden muss, damit die new-Seite wieder angezeigt wird und die Daten nicht gespeichert werden:
	ArticlesController:
	def new
		@article = Article.new
	end

	def create
			@article = Article.new(article_params)

			if @article.save
				redirect_to @article
			else
				render 'new'
			end
	end
	(def new wird gefüllt, da es sonst Fehle bei der Fehleraneige gibt)
	Fehleranzeige ind der new-Datei für Benutzer einfügen:
	<h1>New Article</h1>

	<%= form_for :article, url: articles_path do |f| %>

	<% if @article.errors.any? %>
		<div id="error_explanation">
			<h2>
				<%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:
			</h2>
			<ul>
				<% @article.errors.full_messages.each do |msg| %>
					<li><%= msg %></li>
				<% end %>
			</ul>
		</div>
		<% end %>
	(pluralized zeigt automatisch den gegebenen string "error",  wenn der gegebene parameter größer als null ist)


	Datensätze (article) updaten
	Im ArticlesController eine edit-Methode hinzufügen:
	def edit
		@article = Article.find(params[:id])
	end
	(Normalerweise zwischen der nwe- und der create-Methode)
	Erstellen einer edit.html.erb; ähnlich der new-Datei:
	<h1>Editing Article</h1>

	<%= form_for :article, url: article_path(@article), method: :patch do |f| %>

	<% if @article.errors.any? %>
		<div id="error_explanation">
			<h2>
				<%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:
			</h2>
			<ul>
				<% @article.errors.full_messages.each do |msg| %>
					<li><%= msg %></li>
				<% end %>
			</ul>
		</div>
		<% end %>
		
		<p>
			<%= f.label :title %><br>
			<%= f.text_field :title %>
		</p>

		<p>
			<%= f.label :text %><br>
			<%= f.text_area :text %>
		</p>

		<p>
			<%= f.submit %>
		</p>
	<% end %>

	<%= link_to 'Back', articles_path %>
	Im ArticlesController eine update-Methode hinzufügen:
	def update
		@article = Article.find(params[:id])

		if @article.update(article_params)
			redirect_to @article
		else
			render 'edit'
		end
	end
	(Wird hier zwischen Create und dem Private eingefügt)
	Zum einfügen eines Links zum updaten und der anzeige eines einzelnen Datensatzes die Index-Datei updaten:
	<td><%= link_to 'Show', article_path(article) %></td>
	<td><%= link_to 'Edit', edit_article_path(article) %></td>
	(unter die ausgabe des text-Feldes in der tabellenschleife einfügen)
	Die Show-Datei bekommt auch noch einen Link über dem Back-Link:
	<%= link_to 'Edit', edit_article_path(@article) %> |
	<%= link_to 'Back', articles_path %>


Wiederholungen vermeiden
	Die Edit und die New-Seite sehen sehr ähnlich aus. Nach dem DRY-Prinzip soll dies nicht vorkommen. Diese wird nun entfernt:
	Eine _form.html.erb Datei erstellen:
	<%= form_for @article do |f| %>
		<% if @article.errors.any? %>
			<div id="error_explanation">
				<h2>
					<%= pluralize(@article.errors.count, "error") %> prohibited this article from being saved:
				</h2>
				<ul>
					<% @article.errors.full_messages.each do |msg| %>
						<li><%= msg %></li>
					<% end %>
				</ul>
			</div>
			<% end %>
			
			<p>
				<%= f.label :title %><br>
				<%= f.text_field :title %>
			</p>

			<p>
				<%= f.label :text %><br>
				<%= f.text_area :text %>
			</p>

			<p>
				<%= f.submit %>
			</p>
		<% end %>

	New-Datei updaten:
	<h1>New Article</h1>
	<%= render 'form' %>
	<%= link_to 'Back', articles_path %>

	Edit-Datei udaten:
	<h1>Editing Article</h1>
	<%= render 'form' %>
	<%= link_to 'Back', articles_path %>

Datensätze löschen
	Im ArticlesControllen einzutragen:
	def destroy
		@article = Article.find(params[:id])
		@article.destroy

		redirect_to articles_path
	end
	(Nach dem CRUD-Prinzip an letzter Stelle (vor der Private))

	In der Index-Datei als letzten Link einfügen:
	<td><%= link_to 'Delete', article_path(article),method: :delete, data: { confirm: 'Are you sure?' } %></td>
	(Die HTML5 Argunmente method: und data-confirm: funktionieren über die eingebundene JavaScript Oberfläche von rails)



Erstellen eines zweiten Models
	bin/rails generate model Comment commenter:string body:text article:references

		(es werden 3 Datein erstellt. 
			db/migrate/20151026200140_create_comments.rb 	migration der														datenbank
      		app/models/comment.rb 							kommentar model
      		test/models/comment_test.rb 					testumgebung für 													kommentar model
      		test/fixtures/comments.yml						Beispielkomponenten
      														für Testbenutzung)
      	Die comment.rb entählt neuerdings eine verknüpfung mit :article
      	In der create_comments.rb steht nun zusätzlich eine referenz zu :article mit einem foreign key

Eingliedern der neuen Tabelle
	bin/rake db:migrate

AssoziationsModelle
	Jedes Comment gehört zu einem article 			gegeben durch comment.rb
	Ein article kann mehrere comments haben			muss in article.rb hinein

	in article.rb hinzufügen:
		has_many :comments

Route für article abändern
	resources :articles do
    	recources :comments
 	end
 	(stellt zudem zusätzlich die herarchie dar)

Erstellen des Controllers
	bin/rails generate controller Commennts

Die show-Datei für coments-hinzufügen anpassen hinzuzufügen:
	<h2>Add a comment:</h2>
	<%= form_for([@article, @article.comments.build]) do |f| %>
		<p>
			<%= f.label :commenter %><br>
			<%= f.text_field :commenter %>
		</p>
		<p>
			<%= f.label :body %><br>
			<%= f.text_area :body %>
		</p>
		<p>
			<%= f.submit %>
		</p>
	<% end %>

Den comments_controller bearbeiten
	class CommenntsController < ApplicationController
		def create
			@article = Article.find(params[:article_id])
			@comment = @article.comments.create(comment_params)
			redirect_to article_path(@article)
		end

		private
			def comment_params
				params.require(:comment).permit(:commenter, :body)
			end
	end

Die show-Datei zur comment-Ansicht anpassen:
	<h2>Comments</h2>
	<% @article.comments.each do |comment| %>
		<p>
			<strong>Commenter:</strong>
			<%= comment.commenter %>
		</p>
		<p>
			<strong>Comment:</strong>
			<%= comment.body %>
		</p>
	<% end %>
	(vor hinzufügen von komments einfügen)

show.html.erb Code kürzen
	Erstellen der _comment.html.erb in app/views/comments
		<p>
			<strong>Commenter:</stong>
			<%= comment.commenter %>
		</p>
		<p>
			<stong>Comment:</stong>
			<%= comment.body %>
		</p>

	Erstellen der _form.html.erb in app/views/comments
		<%= form_for([@article, @article.comments.build]) do |f| %>
			<p>

				<%= f.label :commenter %><br>
	
				<%= f.text_field :commenter %>
			</p>

			<p>
				<%= f.label :body %><br>
				<%= f.text_area :body %>

			</p>
			<p>
				<%= f.submit %>
			</p>
		<% end %>

	Neue show.html.erb-Datei
		<p> 
			<strong>Title:</strong>
			<%= @article.title %>
		</p>
 		<p>
  			<strong>Text:</strong>
  			<%= @article.text %>
		</p>
 
		<h2>Comments</h2>
		<%= render @article.comments %>
 
		<h2>Add a comment:</h2>
		<%= render 'comments/form' %>
 
		<%= link_to 'Edit', edit_article_path(@article) %> |
		<%= link_to 'Back', articles_path %>

Löschen von Kommentaren
	Die _comment.html.erb erweitern
		<p>
			<%= link_to 'Destroy Comment', [comment.article, comment], method: :delete, data: {confirm: 'Are you shure?'} %>
		</p>

	Hinzufügen der Destroy-Methode im CommentsControler
		def destroy
			@article = Article.find(params[:article_id])
			@comment = @article.commentS.find(params[:id])
			@comment.destroy
			redirect_to article_path(@article)
		end

Komentare löschen bei löschung des Blog-Eintrages
	In der article.rb die Article class ändern:
		class Article < ActiveRecord::Base
			has_many :comments, dependent: :destroy
			validates :title, presence: true, lenght: {minimum: 5}
		end

Sicherheit
	Standartauthentifizierung im ArticlesController hinzufügen:
		http_basic_authenticate_with name: "Admin", password: "1234", expect:[:index, :show]

	Authentifizierung zur Kommentarlöschung:
		http_basic_authenticate_with name: "Admin", password: "1234", only: :destroy

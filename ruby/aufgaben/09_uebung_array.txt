1. Legen Sie ein Array an mit den Zahlen 15 bis 20 an.

	a=(15..20).to_a


a. geben Sie diese Zahlen in einem Block aus

 	a=(15..20).to_a
 	a.each {|x| puts x}
 oder
	a.each do |x|
 		puts x.to_s
 	end


b. geben Sie die Zahlen mit dem Index etwa so aus: Index: 0 - Wert: 15
 
	 a=(15..20).to_a
	 a.each_with_index do |z,i|
	 	puts "Index; #{i} - Wert: #{z}"
	 end


c. erzeugen Sie in einem Block einen Hash, wobei Sie die Arraywerte als Index nutzen und als Wert eine Zufallszahl zwischen 100 und 200 speichern.

	a=(15..20).to_a
	c = Hash.new
	a.each do |x|
		c[x] = rand(100..200)
	end
	puts c


d. Geben Sie diesen Hash anschließen etwa so aus: Index: 15 - Wert: 121

	a=(15..20).to_a
	c = Hash.new
	a.each do |x|
		c[x] = rand(100..200)
	end
	c.each do |i,w|
		puts "Index:#{i} - Wert:#{w}"
	end


e. Ergänzen Sie die Ausgabe. Wenn der Wert größer als 150 ist, dann sieht die Ausgabe aus:  Index: 15 - Wert: 151. WOW

	a=(15..20).to_a
	c = Hash.new
	a.each do |x|
		c[x] = rand(100..200)
	end
	c.each do |i,w|
		if c < 150
			puts "Index:#{i} - Wert:#{w}"
		else
			puts "WOW! Index:#{i} - Wert:#{w}"	
		end
	end

f. Durchlaufen Sie das Array und speichern Sie die Quadratzahlen in einem Array

	a=(15..20).to_a
	q=[]
	a.each {|x| q<<x**2}
	puts q


g. ! Durchlaufen Sie das Array und speichern Sie die Quadratzahlen in einem Hash mit der Zahl als Schlüssel

	a=(15..20).to_a
	q={}
	a.each do |x|
	 	q[x] = x**2
	end
	puts q





Zusatz Zahlen im Array und im Hash:
a. Legen Sie ein Array an mit 10 Primzahlen. Die Ausgabe des Arrays erzeugt:
	1 ist einstellig
	3 ist einstellig
	...
	11 ist zweistellig


	require 'prime'

	a = Prime.first 10

	a.each 	{|x|
			if x.to_s.length <2
				s = "einstellig"
			else
				s = "zweistellig"
			end
			puts "#{x} ist #{s}" 
			}
		

  ...
b. Legen Sie zur Übung einen Hash personen an, mit den keys vorname, nachname, stadt und den Werten Theo, Sommer, Lodz. Machen Sie eine Ausgabe, die 'vorname: Theo + neue Zeile' ausgibt

	
	p={vorname: "Theo",nachname: "Sommer",stadt: "Lodz"}
	p.each do |key,val|
		puts "#{key.capitalize}:#{val}\n"
	end


c. Fortsetzung Aufgabe a: 
Speichern Sie beim Durchlaufen des Arrays die Werte in einem Hash mit der Bezeichnung prims, sodass die jeweilige Primzahl den Schlüssel bildet und der Wert den Text 'ist einstellig', 'ist zweistellig'

require 'prime'
	a = Prime.first 10
	prims = Hash.new
	a.each 	{|x|
			if x<10 
				s = "einstellig"
			else
				s = "zweistellig"
			end
			prims[x] = s
			}
	puts prims

oder
	require 'prime'
	a = Prime.first 10
	prims = Hash.new
	a.each 	do |x|
				prims[x] = x.to_s.length <2 ? " ist einstellig" : "ist zweistellig"
			end
	puts prims


d. Sortieren Sie den Hash, sodass die Ausgabe folgendermaßen möglich wird:
Einstellig: 1,3,5 ..
Zweistellig: 11, 13, ..

require 'prime'

	a = Prime.first 10
	prims = Hash.new
	a.each 	{|x|
			if x<10 
				s = "einstellig"
			else
				s = "zweistellig"
			end
			prims[x] = s
			}
	puts prims.vaues.sort_by


e. Fortsetzung Aufgabe b: 
Speichern Sie den Hash in dem Array adressen und legen Sie zwei weitere Hashes personen mit den gleichen Keys und anderen Werten an. Durchlaufen Sie das Array, sodass folgende Ausgabe erfolgt.
1.Person:
Name: Theo
Vorname: Sommer
Stadt: Lodz
2. Person:
......

p1 = Hash.new
	p1={vorname: "Theo",nachname: "Sommer",stadt: "Lodz"}
p2 = Hash.new
	p2={vorname: "Lotto",nachname: "King",stadt: "Karl"}
p3 = Hash.new
	p3={vorname: "Hans",nachname: "Heinrich",stadt: "Erhard"}
adressen = [p1,p2,p3]
i=1
adressen.each do |a|
	puts "Person #{i}:"
	a.each do |key,val|
		puts "#{key.capitalize}: #{val}" 
	end
	i=i+1
end



2. Worte
a. Bilde ein Array mit den Worten: Pflaume, Bauschaum, Auster
 
	einArray=%w(Pflaume Bauschaum Auster)


b. Alle Elemente, die den String 'aus' enthalten sollen ausgegeben werden.
	
	einArray=%w(Pflaume Bauschaum Auster)
	einArray.each {|w| puts w.include?(aus) ? w :""}

#oder

	var = einArray = liste.select do |w|
			w.include?("aus") || a.include?("Aus")
	end
	puts var

#oder

	einArray.each do |a|
		if a.downcase["aus"] == 'aus'
			puts a
		end
	end



c. erzeugen eine Ausgabe nach der Länge der Worte von klein nach groß

	einArray=%w(Pflaume Bauschaum Auster)
	puts einArray.sort_by {|a| a.length}


d. Ein Hash wird ausgegeben, das Wort als Index, die Anzahl der Buchstaben als Wert

einArray=%w(Pflaume Bauschaum Auster)
newHash = Hash.new
einArray.each do |v|
		newHash[v] = v.length
	end
puts newHash


3. Lottogenerator:
a. Schreiben Sie einen kleinen Lottozahlengenerator. Es sollen 7 Zahlen aus 49 Möglichkeiten in einem Array ausgegeben werden.

lotto = []
7.times do
	z = rand(1..49)
	while lotto.include?(z)
		z = rand(1..49)
	end
	lotto << z
end
puts lotto.sort

#oder

puts lotto = (1..49).to_a.sample(7).sort


b. Peter, Paul und Mary bilden einen Hash, etwa derart: lotto = { "Peter" => [ 2,22,33,11,23,32,26 ], ...}

spieler_arr = %w(Peter Paul Mary)
spieler_hsh = Hash.new
spieler_arr.each_with_index {|i,h|
			lotto = []
			7.times do
				z = rand(1..49)
				while lotto.include?(z)
					z = rand(1..49)
				end
			lotto << z
			end
		spieler_hsh[i] = lotto
		}
puts spieler_hsh

#oder

ltto_hash = Hash.new
%w(Perter Paul Mary).each do |vname|
	lotto_hash[vname] = (1..49).to_a.sample(7).sort
end
puts lotto_hash



4. Vergleich:
str_1 = "Programmieren, Federball, Whisky"
str_2 = "Fussball, Bier, Programmieren"
Die Ausgabe lautet:
ergebnis = { :diff => ["Federball", "Whisky", "Fussball", "Bier"], :match => ["Programmieren"]}

str_1 = %w(Programmieren Federball Whiskey)
str_2 = %w(Fussball Bier Programmieren)
ergebnis = {diff: (str_1-str_2)+(str_2-str_1),match: str_1&str_2}
puts "ergebnnis= #{ergebnis}"